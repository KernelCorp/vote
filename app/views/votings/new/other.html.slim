.voting_new
  h1
    - if @voting.id.blank?
      = t('organization.poll.create')
      .switcher.second
        .elem.first
          = link_to t('organization.poll.type.first'), '?type=monetary', :class => 'twhite'
        .elem.second
          = link_to t('organization.poll.type.second'), '?type=other', :class => 'twhite'
    - else
      = t('organization.poll.edit')

  = form_for @voting, as: 'voting',
    html: { class: 'form',
            name: 'create_monetary_poll',
            multipart: true,
            data: { type: 'json', created: t('voting.new.created'), cannot: t('voting.status.cannot_update_voting') } },
    remote: true do |f|

    .td.voting_form
      = f.hidden_field :type, :value => :other_voting if @voting.id.blank?

      =render 'votings/new/general_settings', f: f
      .voting_rectangle.voting_basic
        .tr= inp f, :how_participate, type: :text_area, i_options: { rows: 5 }

      .voting_rectangle_grey.voting_parametrs
        h3= t 'organization.poll.h3.voting'

        .tr
          = f.label :start_date
          .td.input_parametr= f.text_field :start_date, value: @voting.start_date.strftime('%d/%m/%Y'), class: 'date'
        .tr
          = f.label :cost_of_like
          .td.input_parametr= f.text_field :cost_of_like
        .tr
          = f.label :cost_of_repost
          .td.input_parametr= f.text_field :cost_of_repost

        h4= t 'organization.poll.end.how'

        .tr
          = f.radio_button :way_to_complete, :count_users, :class => 'radiocheck'
          = f.label :way_to_complete, 'Максимум участников', value: :count_users
          .td.input_parametr= f.text_field :max_users_count
          #mini_button
            .up.button
            .down.button


        .tr
          = f.radio_button :way_to_complete, :date, :class => 'radiocheck', checked: 'checked'
          = f.label :way_to_complete, 'Дата окончания', value: :date
          .td.input_parametr= f.text_field :end_date, value: @voting.end_date.strftime('%d/%m/%Y'), class: 'date'

        .tr
          = f.radio_button :way_to_complete, :count_points, :class => 'radiocheck'
          = f.label :way_to_complete, ' Максимальное количество Голосов', value: :count_points
          .td.input_parametr= f.text_field :points_limit



      .tr

        h3.tgreenoblue
          = t 'organization.poll.actions.title'
        .normal_row
          = render 'votings/new/actions_form', :f => f

      .tr
        = link_to t('organization.poll.go_back_to_list'), organization_path, class: 'button big', style: 'width: 110px;'
        - if can? :update, @voting
          = f.submit t('organization.poll.save_and_check'), class: 'button big', style: 'width: 360px; margin-left: 30px;'


    .td.voting_preview
      .voting_rectangle_grey
        h1= t 'organization.poll.preview_poll'

        #widgetframe
          .widget.active#changed_voting_prize
            = image_tag @voting.prize.url, :class => "widget_image"

            .widget_body#changed_voting_brand
              = image_tag @voting.brand.url, :class => "widget_brand"

              .widget_name_container
                .widget_name#changed_voting_name= @voting.name.nil? ? 'Название' : @voting.name

              = link_to t('widget.join'), 'javascript:{}', method: :post, :class => "button widget_button"


      .voting_rectangle_grey#voting_preview_description
        h1 Описание

        div

javascript:
  (function(){
    $('textarea[name="voting[description]"]').on('keyup change', function(){
      $('#voting_preview_description div').html( $(this).val().replace(/\n/g, '<br/>') );
    });

    var bodyheader = $('#bodyheader');
    var standard_background = $('.standard_background');

    $("#custom_background_color, #custom_head_color").spectrum({
      preferredFormat: "hex6",
      showInitial: true,
      chooseText: "#{ t'organization.poll.custom_style.head.ok' }",
      cancelText: "#{ t'organization.poll.custom_style.head.cancel' }",
      clickoutFiresChange: true,
      move: function( color ){
        $( $(this).attr('id') == 'custom_background_color' ? standard_background : bodyheader ).css('background-color', color.toHexString());
      }
    });

    if( $('#new_voting').length ){
      $("#custom_background_color").spectrum( 'set', '#e7e7e7' );
      $("#custom_head_color").spectrum( 'set', '#2c728d' );
    }

    $('#mini_button .button').on('mousedown', function(){
      var input = $('#voting_max_users_count');
      input.val(
        Math.max(
          ( parseInt( input.val() ) || 0 )
          +
          ( ( $(this).hasClass('up') ) ? 10 : -10 ),
          0
        )
      );
      return false;
    });
  })();
